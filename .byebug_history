c
Rails.cache.stats
Rails.cache.instance_variable_get(:@data).keys
Rails.cache.keys
Rails.cache
Rails.cache.read(cache_string)
c
Rails.cache.read(cache_string)
c
Rails.cache.read(cache_string)
cache_string = "weather_data_#{params[:forcast_data][:zip_code]}"
params
c
Rails.cache.read(cache_string)
c
Rails.cache.read(cache_string)
cache_string
Rails.cache.read(cache_string)
c
Rails.cache.read(cache_string)
c
Rails.cache.read(cache_string)
c
Rails.cache.read(cache_string)
cache_string
Rails.cache.read(cache_string)
Rails.cache.read(cache_string).nil?
c
@forcast_data
c
Rails.cache.read(cache_string).nil?
c
Rails.cache.read(cache_string)
cache_string
@forcast_data
c
@forcast_data
c
Rails.cache.read(cache_string)
check_rails_cache
c
@forcast_data = {temp: params[:forcast_data][:temp], max_temp: params[:forcast_data][:temp_max], min_temp: params[:forcast_data][:temp_min]}
c
check_rails_cache
@forcast_data = params[:forcast_data].except(:zip_code)
q
params[:forcast_data].except(:zip_code)
params[:forcast_data].except(:zip_code).to_json
params[:forcast_data].except(:zip_code)
params[:forcast_data].except(zip_code)
params[:forcast_data]
check_rails_cache = Rails.cache.read(cache_string)
cache_string = "weather_data_#{params[:forcast_data][:zip_code]}"
params[:forcast_data][:zip_code]
params[:forcast_data]
params
c
params
Rails.cache.read("weather_data")
Rails.cache.fetch("weather_data")
params[:forcast_data]
params
c
Rails.cache.fetch("weather_data")
c
Rails.cache.fetch("weather_data")
c
data = {temp: forcast.main.temp, max_temp: forcast.main.temp_max, min_temp: forcast.main.temp_min}
forcastdata = {temp: forcast.main.temp, max_temp: forcast.main.temp_max, min_temp: forcast.main.temp_min}
forcast
c
Rails.cache.fetch("weather_data")
Rails.cache.read("weather_data")
c
Rails.cache.read("weather_data")
Rails.cache
c
params[:params]
params
c
params
c
test = {temp: forcast.main.temp, max_temp: forcast.main.temp_max, min_temp: forcast.main.temp_min}.to_json
test = {temp: forcast.main.temp, max_temp: forcast.main.temp_max, min_temp: forcast.main.temp_min}
test = {temp: forcast.main.temp, max_temp: forcast.main.temp_max, min_temp: forcast.main.temp_min}.to_json
test = {temp: forcast.main.temp, max_temp: forcast.main.temp_max, min_temp: forcast.main.temp_min}
forcast.main.temp_max
forcast.main
forcast.main.select {|x| x.temp, x.temp_max, x.temp_min}
forcast.main.select(:temp, :temp_max, :temp_min)
forcast.main.select(:temp, :temp_max, :temp_min}
forcast.main.select {|x| x.temp, temp_max, temp_min}
forcast.main
forcast.data
forcast.last
forcast.first
client.current
forcast.current
forcast
forcast.current
forcast
c
forcast.present?
forcast = client.current_weather(forcast_params)
forcast.present?
client.current_weather(forcast_params)
forcast_params
client = OpenWeather::Client.new(api_key: ENV["OPEN_WEATHER_API"])
ENV["OPEN_WEATHER_API"]
ENV[:OPEN_WEATHER_API]
forcast_params
c
params.except(:authenticity_token, :commit).permit(:address, :city, :state, :country, :zip_code)
forcast_params
missing_fields = forcast_params.select {|k,v| v.empty?}.keys
validate_fields
c
missing_fields.join(" ,") + " are required fields"
missing_fields.join(" ,") + "are required fields"
missing_fields.join(" ,")
missing_fields.join(",")
missing_fields.joins(",")
missing_fields = forcast_params.select {|k,v| v.empty?}.keys
forcast_params.select {|k,v| v.empty?}
forcast_params.select {|k,v| v.empty?}.keys
forcast_params.select {|k,v| v.empty?}
forcast_params.select {|k,v| v.nil?}
forcast_params
params
c
params.values_at(:address, :city, :state, :country, :zip_code).uniq.include? ""
c
params.values_at(:address, :city, :state, :country, :zip_code).uniq.include? ""
params.values_at(:address, :city, :state, :country, :zip_code).uniq
params.values_at(:address, :city, :state, :country, :zip_code).flatten
c
params.values_at(:address, :city, :state, :country, :zip_code).flatten
params.values_at(:address, :city, :state, :country, :zip_code)
c
params.values_at(:address, :city, :state, :country, :zip_code)
c
validate_fields
c
validate_fields
c
validate_fields
c
params.values_at(:address, :city, :state, :country, :zip_code).include?("")
params.values_at(:address, :city, :state, :country, :zip_code).include?(nil)
params.values_at(:address, :city, :state, :country, :zip_code).includes?(nil)
require.all? {|k| puts k}
require.all? {|k| params.has_key? k}
required.all? {|k| params.has_key? k}
require = [:address, :city, :state, :country, :zip_code]
require = [:address, :city, :state, :country, :zip_code)]
forcast_params[:address].present?
forcast_params[:address]
forcast_params
c
params.permit(:zip_code)
forcast_paramsparams.permit(:zip_code)
params.require(:forcasts).permit(:zip_code)
params.require(:forcast).permit(:zip_code)
	end
params
forcast_params
